// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  firstName       String
  lastName        String
  email           String          @unique
  password        String
  theme           Theme?          @default(LIGHT)
  isLoggedIn      Boolean
  documents       Document[]
  requests        Request[]
  documentShares  DocumentShare[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  sharedDocuments Document[]      @relation("sharedDocs")
  notifications   Notification[]

  @@unique([firstName, lastName])
}

model Document {
  id             String          @id @default(uuid())
  title          String
  description    String?
  content        String
  downloads      Int
  views          Int
  shares         Int
  isPinned       Boolean
  isArchived     Boolean
  isDeleted      Boolean
  deletedAt      DateTime?
  documentShares DocumentShare[]
  author         User            @relation(fields: [authorId], references: [id])
  authorId       String
  requestId      String
  requests       Request[]
  autoSave       Boolean
  saveInterval   Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sharedWith     User[]          @relation("sharedDocs")
  notifications  Notification[]

  @@unique([title, authorId])
}

model Request {
  id        String        @id @default(uuid())
  status    RequestStatus @default(PENDING)
  isViewed  Boolean
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  docId     String
  document  Document      @relation(fields: [docId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([userId, docId])
}

enum Permission {
  VIEW
  COMMENT
  EDIT
  MANAGE
}

model DocumentShare {
  id         String     @id @default(uuid())
  document   Document   @relation(fields: [documentId], references: [id])
  documentId String
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  permission Permission
  expiresAt  DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([documentId, userId])
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  isViewed  Boolean
  isDeleted Boolean
  deletedAt DateTime?
  content   String
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  docId     String
  document  Document         @relation(fields: [docId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([userId, docId])
}

enum NotificationType {
  DOCUMENT_SHARED
  DOCUMENT_REQUEST
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SaveEvery {
  THIRTY_SECONDS
  MINUTE
  FIVE_MINUTES
  TEN_MINUTES
  THIRTY_MINUTES
  HOUR
}

enum Theme {
  DARK
  LIGHT
  SYSTEM
}
